def get_kernels(line, size):
    for u in ["sinf", "cosf", "tanf", "sqrtf", "expf"]:
        line = line.replace(u, f"{u[:-1]}")
    
    line = line.replace("sqrt", f"SAFE_SQRT")
    for c in df.columns:
        line = line.replace(f"_{c}_", f"({c}[i{size}])")

    kernel_func = f'''__global__ void calculate{size}({all_variables_string})
{{

    int i{size} = blockIdx.x * blockDim.x + threadIdx.x; //cada i eh um valor das variaveis
    __shared__ double store_value_matrix[NUMBER_ROW];

    if ((blockIdx.x * blockDim.x + threadIdx.x) == 0){{
      for (int j = 0; j < NUMBER_ROW; j++){{
          store_value_matrix[j] = 0;
      }}
    }}
    __syncthreads();



    while(i{size} < NUMBER_ROW){{
      store_value_matrix[i{size}] = ({line}-y[i{size}])*({line}-y[i{size}]);
      i{size} += gridDim.x *blockDim.x;
    }}
    __syncthreads();

    for (int s=1; s < NUMBER_ROW; s *= 2) {{
      int index = 2 * s * threadIdx.x;
      if (index < NUMBER_ROW) {{
        store_value_matrix[index] += store_value_matrix[index + s];
      }}
      __syncthreads();
    }}

    if ((blockIdx.x * blockDim.x + threadIdx.x) == 0){{
      store_return_value[{size}] = store_value_matrix[0] /NUMBER_ROW;
    }}

}}'''